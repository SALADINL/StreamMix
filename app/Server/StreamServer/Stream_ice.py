# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.3
#
# <auto-generated>
#
# Generated from file `Stream.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module App
_M_App = Ice.openModule('App')
__name__ = 'App'

_M_App._t_Stream = IcePy.defineValue('::App::Stream', Ice.Value, -1, (), False, True, None, ())

if 'StreamPrx' not in _M_App.__dict__:
    _M_App.StreamPrx = Ice.createTempClass()
    class StreamPrx(Ice.ObjectPrx):

        def addMusic(self, music, context=None):
            return _M_App.Stream._op_addMusic.invoke(self, ((music, ), context))

        def addMusicAsync(self, music, context=None):
            return _M_App.Stream._op_addMusic.invokeAsync(self, ((music, ), context))

        def begin_addMusic(self, music, _response=None, _ex=None, _sent=None, context=None):
            return _M_App.Stream._op_addMusic.begin(self, ((music, ), _response, _ex, _sent, context))

        def end_addMusic(self, _r):
            return _M_App.Stream._op_addMusic.end(self, _r)

        def removeMusic(self, context=None):
            return _M_App.Stream._op_removeMusic.invoke(self, ((), context))

        def removeMusicAsync(self, context=None):
            return _M_App.Stream._op_removeMusic.invokeAsync(self, ((), context))

        def begin_removeMusic(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_App.Stream._op_removeMusic.begin(self, ((), _response, _ex, _sent, context))

        def end_removeMusic(self, _r):
            return _M_App.Stream._op_removeMusic.end(self, _r)

        def playMusic(self, context=None):
            return _M_App.Stream._op_playMusic.invoke(self, ((), context))

        def playMusicAsync(self, context=None):
            return _M_App.Stream._op_playMusic.invokeAsync(self, ((), context))

        def begin_playMusic(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_App.Stream._op_playMusic.begin(self, ((), _response, _ex, _sent, context))

        def end_playMusic(self, _r):
            return _M_App.Stream._op_playMusic.end(self, _r)

        def pauseMusic(self, context=None):
            return _M_App.Stream._op_pauseMusic.invoke(self, ((), context))

        def pauseMusicAsync(self, context=None):
            return _M_App.Stream._op_pauseMusic.invokeAsync(self, ((), context))

        def begin_pauseMusic(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_App.Stream._op_pauseMusic.begin(self, ((), _response, _ex, _sent, context))

        def end_pauseMusic(self, _r):
            return _M_App.Stream._op_pauseMusic.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_App.StreamPrx.ice_checkedCast(proxy, '::App::Stream', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_App.StreamPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::App::Stream'
    _M_App._t_StreamPrx = IcePy.defineProxy('::App::Stream', StreamPrx)

    _M_App.StreamPrx = StreamPrx
    del StreamPrx

    _M_App.Stream = Ice.createTempClass()
    class Stream(Ice.Object):

        def ice_ids(self, current=None):
            return ('::App::Stream', '::Ice::Object')

        def ice_id(self, current=None):
            return '::App::Stream'

        @staticmethod
        def ice_staticId():
            return '::App::Stream'

        def addMusic(self, music, current=None):
            raise NotImplementedError("servant method 'addMusic' not implemented")

        def removeMusic(self, current=None):
            raise NotImplementedError("servant method 'removeMusic' not implemented")

        def playMusic(self, current=None):
            raise NotImplementedError("servant method 'playMusic' not implemented")

        def pauseMusic(self, current=None):
            raise NotImplementedError("servant method 'pauseMusic' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_App._t_StreamDisp)

        __repr__ = __str__

    _M_App._t_StreamDisp = IcePy.defineClass('::App::Stream', Stream, (), None, ())
    Stream._ice_type = _M_App._t_StreamDisp

    Stream._op_addMusic = IcePy.Operation('addMusic', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), ())
    Stream._op_removeMusic = IcePy.Operation('removeMusic', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())
    Stream._op_playMusic = IcePy.Operation('playMusic', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())
    Stream._op_pauseMusic = IcePy.Operation('pauseMusic', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())

    _M_App.Stream = Stream
    del Stream

# End of module App
